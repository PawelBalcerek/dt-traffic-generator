// <auto-generated />
using System;
using Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.Migrations
{
    [DbContext(typeof(EfficiencyTestDbContext))]
    [Migration("20191223195954_InsertEndpoints")]
    partial class InsertEndpoints
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Data.Models.Endpoint", b =>
                {
                    b.Property<long>("EndpointId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EndpointName");

                    b.Property<string>("HttpMethod");

                    b.HasKey("EndpointId");

                    b.ToTable("Endpoints");

                    b.HasData(
                        new { EndpointId = 1L, EndpointName = "UserGetInfo", HttpMethod = "GET" },
                        new { EndpointId = 2L, EndpointName = "UserRegister", HttpMethod = "POST" },
                        new { EndpointId = 3L, EndpointName = "UserLogin", HttpMethod = "POST" },
                        new { EndpointId = 4L, EndpointName = "UserLogout", HttpMethod = "GET" },
                        new { EndpointId = 5L, EndpointName = "CompaniesShow", HttpMethod = "GET" },
                        new { EndpointId = 6L, EndpointName = "CompaniesAdd", HttpMethod = "POST" },
                        new { EndpointId = 7L, EndpointName = "ResourcesShow", HttpMethod = "GET" },
                        new { EndpointId = 8L, EndpointName = "SellOffersShow", HttpMethod = "GET" },
                        new { EndpointId = 9L, EndpointName = "SellOffersAdd", HttpMethod = "POST" },
                        new { EndpointId = 10L, EndpointName = "SellOffersWithdraw", HttpMethod = "GET" },
                        new { EndpointId = 11L, EndpointName = "BuyOffersShow", HttpMethod = "GET" },
                        new { EndpointId = 12L, EndpointName = "BuyOffersAdd", HttpMethod = "POST" },
                        new { EndpointId = 13L, EndpointName = "BuyOffersWithdraw", HttpMethod = "GET" },
                        new { EndpointId = 14L, EndpointName = "TransactionsShow", HttpMethod = "GET" }
                    );
                });

            modelBuilder.Entity("Data.Models.Test", b =>
                {
                    b.Property<long>("TestId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("ApiTestTime");

                    b.Property<double>("ApplicationTestTime");

                    b.Property<double>("DatabaseTestTime");

                    b.Property<long>("EndpointId");

                    b.Property<long>("TestParametersId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<long>("UserId");

                    b.HasKey("TestId");

                    b.HasIndex("EndpointId");

                    b.HasIndex("TestParametersId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Data.Models.TestParameters", b =>
                {
                    b.Property<long>("TestParametersId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("MaxBuyPrice");

                    b.Property<double>("MaxSellPrice");

                    b.Property<double>("MinBuyPrice");

                    b.Property<double>("MinSellPrice");

                    b.Property<int>("NumberOfRequests");

                    b.Property<int>("NumberOfUsers");

                    b.Property<string>("TestName");

                    b.HasKey("TestParametersId");

                    b.ToTable("TestParameters");
                });

            modelBuilder.Entity("Data.Models.Test", b =>
                {
                    b.HasOne("Data.Models.Endpoint", "Endpoint")
                        .WithMany("Tests")
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Models.TestParameters", "TestParameters")
                        .WithMany("Tests")
                        .HasForeignKey("TestParametersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
